plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "com.facebook.react"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
}

import com.android.build.OutputFile

react {
    autolinkLibrariesWithApp()
}

android {
    ndkVersion rootProject.ext.ndkVersion
    externalNativeBuild {
        cmake {
            version rootProject.ext.cmakeVersion
        }
    }
    compileOptions {
        sourceCompatibility rootProject.ext.javaVersion
        targetCompatibility rootProject.ext.javaVersion
    }
    compileSdk rootProject.ext.compileSdkVersion

    namespace "io.robertying.learnx"

    defaultConfig {
        applicationId "io.robertying.learnx"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        compileSdk rootProject.ext.compileSdkVersion
        versionCode 9204012
        versionName "16.1.0"
    }

    splits {
        abi {
            reset()
            enable true
            universalApk true
            include "armeabi-v7a", "x86", "x86_64", "arm64-v8a"
        }
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())

        release {
            storeFile file("release.keystore")
            storePassword properties.getProperty("LEARNX_RELEASE_STORE_PASSWORD")
            keyAlias properties.getProperty("LEARNX_RELEASE_KEY_ALIAS")
            keyPassword properties.getProperty("LEARNX_RELEASE_KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation("com.facebook.react:hermes-android")

    implementation("androidx.core:core-splashscreen:1.2.0-rc01")
    implementation("com.google.android.material:material:1.14.0-alpha04")

    implementation platform("com.google.firebase:firebase-bom:34.3.0")
    implementation("com.google.firebase:firebase-crashlytics")
    implementation("com.google.firebase:firebase-crashlytics-ndk")
    implementation("com.google.firebase:firebase-analytics")
}
